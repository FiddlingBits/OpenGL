#version 460 core

struct material
{
    sampler2D diffuse;
    float shininess;
    sampler2D specular;
};

struct light
{
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 vo_fragmentPosition;
in vec3 vo_normal;
in vec2 vo_textureCoordinates;
out vec4 FragColor;
uniform light fu_light;
uniform material fu_material;
uniform vec3 fu_viewPosition;

void main()
{
    // Ambient
    vec3 ambient = fu_light.ambient * texture(fu_material.diffuse, vo_textureCoordinates).rgb;
  	
    // Diffuse
    vec3 normal = normalize(vo_normal);
    vec3 lightDirection = normalize(fu_light.position - vo_fragmentPosition);
    float diff = max(dot(normal, lightDirection), 0.0);
    vec3 diffuse = fu_light.diffuse * diff * texture(fu_material.diffuse, vo_textureCoordinates).rgb; 
    
    // Specular
    vec3 viewDirection = normalize(fu_viewPosition - vo_fragmentPosition);
    vec3 reflectDirection = reflect(-lightDirection, normal);  
    float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), fu_material.shininess);
    vec3 specular = fu_light.specular * spec * texture(fu_material.specular, vo_textureCoordinates).rgb;
    
    // Result
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
}
